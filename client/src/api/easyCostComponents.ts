/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import type * as Fetcher from './easyCostFetcher';
import { easyCostFetch } from './easyCostFetcher';
import type * as Schemas from './easyCostSchemas';

export type AppControllerGetHelloError = Fetcher.ErrorWrapper<undefined>;

export const appControllerGetHello = (signal?: AbortSignal) =>
  easyCostFetch<undefined, AppControllerGetHelloError, undefined, {}, {}, {}>({
    url: '/token',
    method: 'get',
    signal,
  });

export type AppControllerSendEmailError = Fetcher.ErrorWrapper<undefined>;

export const appControllerSendEmail = (signal?: AbortSignal) =>
  easyCostFetch<undefined, AppControllerSendEmailError, undefined, {}, {}, {}>({
    url: '/token/mail',
    method: 'get',
    signal,
  });

export type UserControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerCreateVariables = {
  body: Schemas.CreateUserDto;
};

export const userControllerCreate = (
  variables: UserControllerCreateVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.UserEntity,
    UserControllerCreateError,
    Schemas.CreateUserDto,
    {},
    {},
    {}
  >({ url: '/user', method: 'post', ...variables, signal });

export type UserControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerFindAllResponse = Schemas.UserEntity[];

export const userControllerFindAll = (signal?: AbortSignal) =>
  easyCostFetch<
    UserControllerFindAllResponse,
    UserControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: '/user', method: 'get', signal });

export type UserControllerFindUserByCompanyIdPathParams = {
  companyId: string;
};

export type UserControllerFindUserByCompanyIdError =
  Fetcher.ErrorWrapper<undefined>;

export type UserControllerFindUserByCompanyIdResponse = Schemas.UserEntity[];

export type UserControllerFindUserByCompanyIdVariables = {
  pathParams: UserControllerFindUserByCompanyIdPathParams;
};

export const userControllerFindUserByCompanyId = (
  variables: UserControllerFindUserByCompanyIdVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    UserControllerFindUserByCompanyIdResponse,
    UserControllerFindUserByCompanyIdError,
    undefined,
    {},
    {},
    UserControllerFindUserByCompanyIdPathParams
  >({
    url: '/user/userByCompany/{companyId}',
    method: 'get',
    ...variables,
    signal,
  });

export type UserControllerFindUniquePathParams = {
  email: string;
};

export type UserControllerFindUniqueError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerFindUniqueVariables = {
  pathParams: UserControllerFindUniquePathParams;
};

export const userControllerFindUnique = (
  variables: UserControllerFindUniqueVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.UserEntity,
    UserControllerFindUniqueError,
    undefined,
    {},
    {},
    UserControllerFindUniquePathParams
  >({ url: '/user/email/{email}', method: 'get', ...variables, signal });

export type UserControllerFindOnePathParams = {
  id: string;
};

export type UserControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerFindOneVariables = {
  pathParams: UserControllerFindOnePathParams;
};

export const userControllerFindOne = (
  variables: UserControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.UserEntity,
    UserControllerFindOneError,
    undefined,
    {},
    {},
    UserControllerFindOnePathParams
  >({ url: '/user/{id}', method: 'get', ...variables, signal });

export type UserControllerUpdatePathParams = {
  id: string;
};

export type UserControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerUpdateVariables = {
  body?: Schemas.UpdateUserDto;
  pathParams: UserControllerUpdatePathParams;
};

export const userControllerUpdate = (
  variables: UserControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.UserEntity,
    UserControllerUpdateError,
    Schemas.UpdateUserDto,
    {},
    {},
    UserControllerUpdatePathParams
  >({ url: '/user/{id}', method: 'patch', ...variables, signal });

export type UserControllerRemovePathParams = {
  id: string;
};

export type UserControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type UserControllerRemoveVariables = {
  pathParams: UserControllerRemovePathParams;
};

export const userControllerRemove = (
  variables: UserControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.UserEntity,
    UserControllerRemoveError,
    undefined,
    {},
    {},
    UserControllerRemovePathParams
  >({ url: '/user/{id}', method: 'delete', ...variables, signal });

export type ProjectMaterialControllerCreateError =
  Fetcher.ErrorWrapper<undefined>;

export type ProjectMaterialControllerCreateVariables = {
  body: Schemas.CreateProjectMaterialDto;
};

export const projectMaterialControllerCreate = (
  variables: ProjectMaterialControllerCreateVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.ProjectMaterialEntity,
    ProjectMaterialControllerCreateError,
    Schemas.CreateProjectMaterialDto,
    {},
    {},
    {}
  >({ url: '/project-material', method: 'post', ...variables, signal });

export type ProjectMaterialControllerFindAllError =
  Fetcher.ErrorWrapper<undefined>;

export const projectMaterialControllerFindAll = (signal?: AbortSignal) =>
  easyCostFetch<
    undefined,
    ProjectMaterialControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: '/project-material', method: 'get', signal });

export type ProjectMaterialControllerFindOnePathParams = {
  id: string;
};

export type ProjectMaterialControllerFindOneError =
  Fetcher.ErrorWrapper<undefined>;

export type ProjectMaterialControllerFindOneVariables = {
  pathParams: ProjectMaterialControllerFindOnePathParams;
};

export const projectMaterialControllerFindOne = (
  variables: ProjectMaterialControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.ProjectMaterialEntity,
    ProjectMaterialControllerFindOneError,
    undefined,
    {},
    {},
    ProjectMaterialControllerFindOnePathParams
  >({ url: '/project-material/{id}', method: 'get', ...variables, signal });

export type ProjectMaterialControllerUpdatePathParams = {
  id: string;
};

export type ProjectMaterialControllerUpdateError =
  Fetcher.ErrorWrapper<undefined>;

export type ProjectMaterialControllerUpdateVariables = {
  body?: Schemas.UpdateProjectMaterialDto;
  pathParams: ProjectMaterialControllerUpdatePathParams;
};

export const projectMaterialControllerUpdate = (
  variables: ProjectMaterialControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.ProjectMaterialEntity,
    ProjectMaterialControllerUpdateError,
    Schemas.UpdateProjectMaterialDto,
    {},
    {},
    ProjectMaterialControllerUpdatePathParams
  >({ url: '/project-material/{id}', method: 'patch', ...variables, signal });

export type ProjectMaterialControllerRemovePathParams = {
  id: string;
};

export type ProjectMaterialControllerRemoveError =
  Fetcher.ErrorWrapper<undefined>;

export type ProjectMaterialControllerRemoveVariables = {
  pathParams: ProjectMaterialControllerRemovePathParams;
};

export const projectMaterialControllerRemove = (
  variables: ProjectMaterialControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.ProjectMaterialEntity,
    ProjectMaterialControllerRemoveError,
    undefined,
    {},
    {},
    ProjectMaterialControllerRemovePathParams
  >({ url: '/project-material/{id}', method: 'delete', ...variables, signal });

export type ProjectMaterialControllerFindByProjectIdPathParams = {
  projectId: string;
};

export type ProjectMaterialControllerFindByProjectIdError =
  Fetcher.ErrorWrapper<undefined>;

export type ProjectMaterialControllerFindByProjectIdResponse =
  Schemas.ProjectMaterialEntity[];

export type ProjectMaterialControllerFindByProjectIdVariables = {
  pathParams: ProjectMaterialControllerFindByProjectIdPathParams;
};

export const projectMaterialControllerFindByProjectId = (
  variables: ProjectMaterialControllerFindByProjectIdVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    ProjectMaterialControllerFindByProjectIdResponse,
    ProjectMaterialControllerFindByProjectIdError,
    undefined,
    {},
    {},
    ProjectMaterialControllerFindByProjectIdPathParams
  >({
    url: '/project-material/projectMaterial/{projectId}',
    method: 'get',
    ...variables,
    signal,
  });

export type MaterialControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type MaterialControllerCreateVariables = {
  body: Schemas.CreateMaterialDto;
};

export const materialControllerCreate = (
  variables: MaterialControllerCreateVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    undefined,
    MaterialControllerCreateError,
    Schemas.CreateMaterialDto,
    {},
    {},
    {}
  >({ url: '/material', method: 'post', ...variables, signal });

export type MaterialControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type MaterialControllerFindAllResponse = Schemas.MaterialEntity[];

export const materialControllerFindAll = (signal?: AbortSignal) =>
  easyCostFetch<
    MaterialControllerFindAllResponse,
    MaterialControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: '/material', method: 'get', signal });

export type MaterialControllerFindOnePathParams = {
  id: string;
};

export type MaterialControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type MaterialControllerFindOneVariables = {
  pathParams: MaterialControllerFindOnePathParams;
};

export const materialControllerFindOne = (
  variables: MaterialControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.MaterialEntity,
    MaterialControllerFindOneError,
    undefined,
    {},
    {},
    MaterialControllerFindOnePathParams
  >({ url: '/material/{id}', method: 'get', ...variables, signal });

export type MaterialControllerUpdatePathParams = {
  id: string;
};

export type MaterialControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type MaterialControllerUpdateVariables = {
  body?: Schemas.UpdateMaterialDto;
  pathParams: MaterialControllerUpdatePathParams;
};

export const materialControllerUpdate = (
  variables: MaterialControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.MaterialEntity,
    MaterialControllerUpdateError,
    Schemas.UpdateMaterialDto,
    {},
    {},
    MaterialControllerUpdatePathParams
  >({ url: '/material/{id}', method: 'patch', ...variables, signal });

export type MaterialControllerRemovePathParams = {
  id: string;
};

export type MaterialControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type MaterialControllerRemoveVariables = {
  pathParams: MaterialControllerRemovePathParams;
};

export const materialControllerRemove = (
  variables: MaterialControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.MaterialEntity,
    MaterialControllerRemoveError,
    undefined,
    {},
    {},
    MaterialControllerRemovePathParams
  >({ url: '/material/{id}', method: 'delete', ...variables, signal });

export type MaterialControllerFindMaterialByCompanyIdPathParams = {
  companyId: string;
};

export type MaterialControllerFindMaterialByCompanyIdError =
  Fetcher.ErrorWrapper<undefined>;

export type MaterialControllerFindMaterialByCompanyIdResponse =
  Schemas.MaterialEntity[];

export type MaterialControllerFindMaterialByCompanyIdVariables = {
  pathParams: MaterialControllerFindMaterialByCompanyIdPathParams;
};

export const materialControllerFindMaterialByCompanyId = (
  variables: MaterialControllerFindMaterialByCompanyIdVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    MaterialControllerFindMaterialByCompanyIdResponse,
    MaterialControllerFindMaterialByCompanyIdError,
    undefined,
    {},
    {},
    MaterialControllerFindMaterialByCompanyIdPathParams
  >({
    url: '/material/materialByCompany/{companyId}',
    method: 'get',
    ...variables,
    signal,
  });

export type CompanyControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type CompanyControllerCreateVariables = {
  body: Schemas.CreateCompanyDto;
};

export const companyControllerCreate = (
  variables: CompanyControllerCreateVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    undefined,
    CompanyControllerCreateError,
    Schemas.CreateCompanyDto,
    {},
    {},
    {}
  >({ url: '/company', method: 'post', ...variables, signal });

export type CompanyControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export const companyControllerFindAll = (signal?: AbortSignal) =>
  easyCostFetch<
    undefined,
    CompanyControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: '/company', method: 'get', signal });

export type CompanyControllerFindOnePathParams = {
  id: string;
};

export type CompanyControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type CompanyControllerFindOneVariables = {
  pathParams: CompanyControllerFindOnePathParams;
};

export const companyControllerFindOne = (
  variables: CompanyControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    undefined,
    CompanyControllerFindOneError,
    undefined,
    {},
    {},
    CompanyControllerFindOnePathParams
  >({ url: '/company/{id}', method: 'get', ...variables, signal });

export type CompanyControllerUpdatePathParams = {
  id: string;
};

export type CompanyControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type CompanyControllerUpdateVariables = {
  body?: Schemas.UpdateCompanyDto;
  pathParams: CompanyControllerUpdatePathParams;
};

export const companyControllerUpdate = (
  variables: CompanyControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    undefined,
    CompanyControllerUpdateError,
    Schemas.UpdateCompanyDto,
    {},
    {},
    CompanyControllerUpdatePathParams
  >({ url: '/company/{id}', method: 'patch', ...variables, signal });

export type CompanyControllerRemovePathParams = {
  id: string;
};

export type CompanyControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type CompanyControllerRemoveVariables = {
  pathParams: CompanyControllerRemovePathParams;
};

export const companyControllerRemove = (
  variables: CompanyControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    undefined,
    CompanyControllerRemoveError,
    undefined,
    {},
    {},
    CompanyControllerRemovePathParams
  >({ url: '/company/{id}', method: 'delete', ...variables, signal });

export type ProjectControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerCreateVariables = {
  body: Schemas.CreateProjectDto;
};

export const projectControllerCreate = (
  variables: ProjectControllerCreateVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    undefined,
    ProjectControllerCreateError,
    Schemas.CreateProjectDto,
    {},
    {},
    {}
  >({ url: '/project', method: 'post', ...variables, signal });

export type ProjectControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerFindAllResponse = Schemas.ProjectEntity[];

export const projectControllerFindAll = (signal?: AbortSignal) =>
  easyCostFetch<
    ProjectControllerFindAllResponse,
    ProjectControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: '/project', method: 'get', signal });

export type ProjectControllerProjectsByCompanyIdPathParams = {
  companyId: string;
};

export type ProjectControllerProjectsByCompanyIdError =
  Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerProjectsByCompanyIdResponse =
  Schemas.ProjectEntity[];

export type ProjectControllerProjectsByCompanyIdVariables = {
  pathParams: ProjectControllerProjectsByCompanyIdPathParams;
};

export const projectControllerProjectsByCompanyId = (
  variables: ProjectControllerProjectsByCompanyIdVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    ProjectControllerProjectsByCompanyIdResponse,
    ProjectControllerProjectsByCompanyIdError,
    undefined,
    {},
    {},
    ProjectControllerProjectsByCompanyIdPathParams
  >({
    url: '/project/projectByCompany/{companyId}',
    method: 'get',
    ...variables,
    signal,
  });

export type ProjectControllerFindOnePathParams = {
  id: string;
};

export type ProjectControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerFindOneVariables = {
  pathParams: ProjectControllerFindOnePathParams;
};

export const projectControllerFindOne = (
  variables: ProjectControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.ProjectEntity,
    ProjectControllerFindOneError,
    undefined,
    {},
    {},
    ProjectControllerFindOnePathParams
  >({ url: '/project/{id}', method: 'get', ...variables, signal });

export type ProjectControllerUpdatePathParams = {
  id: string;
};

export type ProjectControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerUpdateVariables = {
  body?: Schemas.UpdateProjectDto;
  pathParams: ProjectControllerUpdatePathParams;
};

export const projectControllerUpdate = (
  variables: ProjectControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.ProjectEntity,
    ProjectControllerUpdateError,
    Schemas.UpdateProjectDto,
    {},
    {},
    ProjectControllerUpdatePathParams
  >({ url: '/project/{id}', method: 'patch', ...variables, signal });

export type ProjectControllerRemovePathParams = {
  id: string;
};

export type ProjectControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type ProjectControllerRemoveVariables = {
  pathParams: ProjectControllerRemovePathParams;
};

export const projectControllerRemove = (
  variables: ProjectControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.ProjectEntity,
    ProjectControllerRemoveError,
    undefined,
    {},
    {},
    ProjectControllerRemovePathParams
  >({ url: '/project/{id}', method: 'delete', ...variables, signal });

export type InvitedUserControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type InvitedUserControllerCreateVariables = {
  body: Schemas.CreateInvitedUserDto;
};

export const invitedUserControllerCreate = (
  variables: InvitedUserControllerCreateVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    undefined,
    InvitedUserControllerCreateError,
    Schemas.CreateInvitedUserDto,
    {},
    {},
    {}
  >({ url: '/invited-user', method: 'post', ...variables, signal });

export type InvitedUserControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export const invitedUserControllerFindAll = (signal?: AbortSignal) =>
  easyCostFetch<
    undefined,
    InvitedUserControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: '/invited-user', method: 'get', signal });

export type InvitedUserControllerFindOnePathParams = {
  id: string;
};

export type InvitedUserControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type InvitedUserControllerFindOneVariables = {
  pathParams: InvitedUserControllerFindOnePathParams;
};

export const invitedUserControllerFindOne = (
  variables: InvitedUserControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    undefined,
    InvitedUserControllerFindOneError,
    undefined,
    {},
    {},
    InvitedUserControllerFindOnePathParams
  >({ url: '/invited-user/{id}', method: 'get', ...variables, signal });

export type InvitedUserControllerUpdatePathParams = {
  id: string;
};

export type InvitedUserControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type InvitedUserControllerUpdateVariables = {
  body?: Schemas.UpdateInvitedUserDto;
  pathParams: InvitedUserControllerUpdatePathParams;
};

export const invitedUserControllerUpdate = (
  variables: InvitedUserControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    undefined,
    InvitedUserControllerUpdateError,
    Schemas.UpdateInvitedUserDto,
    {},
    {},
    InvitedUserControllerUpdatePathParams
  >({ url: '/invited-user/{id}', method: 'patch', ...variables, signal });

export type InvitedUserControllerRemovePathParams = {
  id: string;
};

export type InvitedUserControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type InvitedUserControllerRemoveVariables = {
  pathParams: InvitedUserControllerRemovePathParams;
};

export const invitedUserControllerRemove = (
  variables: InvitedUserControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    undefined,
    InvitedUserControllerRemoveError,
    undefined,
    {},
    {},
    InvitedUserControllerRemovePathParams
  >({ url: '/invited-user/{id}', method: 'delete', ...variables, signal });

export type TableCustomFieldsControllerCreateError =
  Fetcher.ErrorWrapper<undefined>;

export type TableCustomFieldsControllerCreateVariables = {
  body: Schemas.CreateTableCustomFieldDto;
};

export const tableCustomFieldsControllerCreate = (
  variables: TableCustomFieldsControllerCreateVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.TableCustomFieldEntities,
    TableCustomFieldsControllerCreateError,
    Schemas.CreateTableCustomFieldDto,
    {},
    {},
    {}
  >({ url: '/table-custom-fields', method: 'post', ...variables, signal });

export type TableCustomFieldsControllerFindAllError =
  Fetcher.ErrorWrapper<undefined>;

export type TableCustomFieldsControllerFindAllResponse =
  Schemas.TableCustomFieldEntities[];

export const tableCustomFieldsControllerFindAll = (signal?: AbortSignal) =>
  easyCostFetch<
    TableCustomFieldsControllerFindAllResponse,
    TableCustomFieldsControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({ url: '/table-custom-fields', method: 'get', signal });

export type TableCustomFieldsControllerFindOnePathParams = {
  id: string;
};

export type TableCustomFieldsControllerFindOneError =
  Fetcher.ErrorWrapper<undefined>;

export type TableCustomFieldsControllerFindOneVariables = {
  pathParams: TableCustomFieldsControllerFindOnePathParams;
};

export const tableCustomFieldsControllerFindOne = (
  variables: TableCustomFieldsControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.TableCustomFieldEntities,
    TableCustomFieldsControllerFindOneError,
    undefined,
    {},
    {},
    TableCustomFieldsControllerFindOnePathParams
  >({ url: '/table-custom-fields/{id}', method: 'get', ...variables, signal });

export type TableCustomFieldsControllerUpdatePathParams = {
  id: string;
};

export type TableCustomFieldsControllerUpdateError =
  Fetcher.ErrorWrapper<undefined>;

export type TableCustomFieldsControllerUpdateVariables = {
  body?: Schemas.UpdateTableCustomFieldDto;
  pathParams: TableCustomFieldsControllerUpdatePathParams;
};

export const tableCustomFieldsControllerUpdate = (
  variables: TableCustomFieldsControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.TableCustomFieldEntities,
    TableCustomFieldsControllerUpdateError,
    Schemas.UpdateTableCustomFieldDto,
    {},
    {},
    TableCustomFieldsControllerUpdatePathParams
  >({
    url: '/table-custom-fields/{id}',
    method: 'patch',
    ...variables,
    signal,
  });

export type TableCustomFieldsControllerRemovePathParams = {
  id: string;
};

export type TableCustomFieldsControllerRemoveError =
  Fetcher.ErrorWrapper<undefined>;

export type TableCustomFieldsControllerRemoveVariables = {
  pathParams: TableCustomFieldsControllerRemovePathParams;
};

export const tableCustomFieldsControllerRemove = (
  variables: TableCustomFieldsControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    Schemas.TableCustomFieldEntities,
    TableCustomFieldsControllerRemoveError,
    undefined,
    {},
    {},
    TableCustomFieldsControllerRemovePathParams
  >({
    url: '/table-custom-fields/{id}',
    method: 'delete',
    ...variables,
    signal,
  });

export type TableCustomFieldsControllerFindCustomFieldsByProjectIdPathParams = {
  projectId: string;
};

export type TableCustomFieldsControllerFindCustomFieldsByProjectIdError =
  Fetcher.ErrorWrapper<undefined>;

export type TableCustomFieldsControllerFindCustomFieldsByProjectIdResponse =
  Schemas.TableCustomFieldEntities[];

export type TableCustomFieldsControllerFindCustomFieldsByProjectIdVariables = {
  pathParams: TableCustomFieldsControllerFindCustomFieldsByProjectIdPathParams;
};

export const tableCustomFieldsControllerFindCustomFieldsByProjectId = (
  variables: TableCustomFieldsControllerFindCustomFieldsByProjectIdVariables,
  signal?: AbortSignal,
) =>
  easyCostFetch<
    TableCustomFieldsControllerFindCustomFieldsByProjectIdResponse,
    TableCustomFieldsControllerFindCustomFieldsByProjectIdError,
    undefined,
    {},
    {},
    TableCustomFieldsControllerFindCustomFieldsByProjectIdPathParams
  >({
    url: '/table-custom-fields/fields/{projectId}',
    method: 'get',
    ...variables,
    signal,
  });

export const operationsByTag = {
  user: {
    userControllerCreate,
    userControllerFindAll,
    userControllerFindUserByCompanyId,
    userControllerFindUnique,
    userControllerFindOne,
    userControllerUpdate,
    userControllerRemove,
  },
  projectMaterial: {
    projectMaterialControllerCreate,
    projectMaterialControllerFindAll,
    projectMaterialControllerFindOne,
    projectMaterialControllerUpdate,
    projectMaterialControllerRemove,
    projectMaterialControllerFindByProjectId,
  },
  material: {
    materialControllerCreate,
    materialControllerFindAll,
    materialControllerFindOne,
    materialControllerUpdate,
    materialControllerRemove,
    materialControllerFindMaterialByCompanyId,
  },
  company: {
    companyControllerCreate,
    companyControllerFindAll,
    companyControllerFindOne,
    companyControllerUpdate,
    companyControllerRemove,
  },
  project: {
    projectControllerCreate,
    projectControllerFindAll,
    projectControllerProjectsByCompanyId,
    projectControllerFindOne,
    projectControllerUpdate,
    projectControllerRemove,
  },
  invitedUser: {
    invitedUserControllerCreate,
    invitedUserControllerFindAll,
    invitedUserControllerFindOne,
    invitedUserControllerUpdate,
    invitedUserControllerRemove,
  },
  tableCustomFields: {
    tableCustomFieldsControllerCreate,
    tableCustomFieldsControllerFindAll,
    tableCustomFieldsControllerFindOne,
    tableCustomFieldsControllerUpdate,
    tableCustomFieldsControllerRemove,
    tableCustomFieldsControllerFindCustomFieldsByProjectId,
  },
};
