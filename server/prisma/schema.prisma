// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:P@ssw0rd@127.0.0.1:3306/prisma"
}

enum UserType {
  CompanyUser
  Client
  CompanyAdmin
}

model Company {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  name        String
  country     String
  logo        String
  User        User[]
  InvitedUser InvitedUser[]
  Material    Material[]
  Project     Project[]
}

model User {
  id    String @id @unique
  name  String
  email String

  createdAt    DateTime      @default(now())
  materialName Material[]
  projectName  Project[]
  userType     UserType
  companyId    String
  Company      Company       @relation(fields: [companyId], references: [id])
  InvitedUser  InvitedUser[]

  @@unique([email, companyId])
}

model InvitedUser {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  Company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  token     String
  //userType
}

model Material {
  id             String           @id @default(uuid())
  materialName   String
  unit           String
  supplier       String
  createdAt      DateTime         @default(now())
  price          Int
  priceUnit      String
  image          String
  User           User?            @relation(fields: [userId], references: [id])
  userId         String?
  ProjecMaterial ProjecMaterial[]
  workByhour     Int
  Company        Company          @relation(fields: [companyId], references: [id])
  companyId      String

  @@unique([materialName, userId])
}

model Project {
  id                String              @id @default(uuid())
  projectName       String
  createdAt         DateTime            @default(now())
  User              User?               @relation(fields: [userId], references: [id])
  userId            String?
  workByhour        Int
  companyId         String
  Company           Company             @relation(fields: [companyId], references: [id])
  ProjecMaterial    ProjecMaterial[]
  InvitedUser       InvitedUser[]
  TableCustomFields TableCustomFields[]
}

model ProjecMaterial {
  id         String   @id @default(uuid())
  material   Material @relation(fields: [materialId], references: [id])
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  materialId String
  projectId  String
  status     Boolean  @default(false)
  createdAt  DateTime @default(now())
  profit     Float    @default(3.9) // percentage added %
  // TableCustomFieldsValues TableCustomFieldsValues[]
}

model TableCustomFields {
  id               String   @id @default(uuid())
  project          Project? @relation(fields: [projectId], references: [id])
  projectId        String?
  columnName       String
  columnType       String
  // TableCustomFieldsValues TableCustomFieldsValues[]
  customFieldValue Json

  @@unique([columnName, projectId])
}

// model TableCustomFieldsValues {
//   id                String            @id @default(uuid())
//   customField       TableCustomFields @relation(fields: [customFieldId], references: [id])
//   customFieldId     String
//   projectMaterial   ProjecMaterial    @relation(fields: [projectMaterialId], references: [id])
//   projectMaterialId String
//   value             String
// }
